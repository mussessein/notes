反射：
-每个类都有一个 Class 对象，包含了与类有关的信息。
-当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。

Class 和 java.lang.reflect 一起对反射提供了支持
java.lang.reflect 类库主要包含了以下三个类：
    Field ：可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；
    Method ：可以使用 invoke() 方法调用与 Method 对象关联的方法；
    Constructor ：可以用 Constructor 创建新的对象。


反射的优点：
    -可扩展性：
        应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。
    -类浏览器和可视化开发环境：
        一个类浏览器需要可以枚举类的成员。
        可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。
    -调试器和测试工具：
        调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。


反射的缺点：
    -性能开销：
        反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。
        因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。
    -安全限制：
        使用反射技术要求程序必须在一个没有安全限制的环境中运行。
    -内部暴露：
        由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法）所以使用反射可能会导致意料之外的副作用

  